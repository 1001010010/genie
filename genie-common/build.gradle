ext {
    metaModelIgnorePattern = "**/com/netflix/genie/common/model/*_.java"
    generatedSourcesDir = new File("${projectDir}/src/generated")
    generatedSourcesJavaDir = new File(generatedSourcesDir, "/java")
}

configurations {
    jpaModelGen
}

sourceSets {
    main {
        java {
            srcDir generatedSourcesJavaDir
        }
    }
}

dependencies {
    /*******************************
     * Compile Dependencies
     *******************************/

    // Hibernate Validator Libs
    compile("org.hibernate:hibernate-validator")

    // Spring Libs
    compile("org.springframework.boot:spring-boot-starter-data-elasticsearch")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")

    // Swagger Libs
    compile("io.swagger:swagger-core:${swagger_version}")

    /*******************************
     * Provided Dependencies
     *******************************/

    /*******************************
     * Runtime Dependencies
     *******************************/

    /*******************************
     * Test Dependencies
     *******************************/

    /*******************************
     * JPA Model Gen Dependencies
     *******************************/

    // Hibernate Metamodel Generator Libraries
    jpaModelGen("org.hibernate:hibernate-jpamodelgen")
}

task generateJPAMetaModel(type: JavaCompile, group: 'build', description: 'Generate JPA Meta Models') {
    source = sourceSets.main.java
    outputs.dir generatedSourcesJavaDir
    destinationDir = generatedSourcesJavaDir
    dependencyCacheDir = compileJava.dependencyCacheDir
    classpath = configurations.compile + configurations.jpaModelGen
    options.compilerArgs = [
            "-proc:only"
    ]
}

clean {
    delete generatedSourcesDir
}

compileJava {
    dependsOn generateJPAMetaModel
}

//Ignore the generated classes from all our style/coverage/bug finding tools
tasks.withType(Checkstyle) {
    exclude metaModelIgnorePattern
}

tasks.withType(FindBugs) {
    classes = classes.filter {
        !it.path.contains('_')
    }
}

tasks.withType(Pmd) {
    exclude metaModelIgnorePattern
}
