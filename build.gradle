buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://repo.spring.io/milestone'
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.0.RELEASE")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.3")
    }
}

plugins {
    id 'nebula.netflixoss' version '3.1.2'
    id 'org.unbroken-dome.test-sets' version '1.2.0'
}

ext.githubProjectName = rootProject.name

release {
    tagStrategy {
        prefixNameWithV = false
    }
}

nebulaRelease {
    addReleaseBranchPattern(/(release(-|\/))?\d+(\.\d+)?\.(x|\d+)/)
}

allprojects {
    clean {
        delete "${projectDir}/genie-db"
        delete "${projectDir}/data"
    }
}

subprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.unbroken-dome.test-sets'

    group = "com.netflix.${githubProjectName}"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        maven {
            url 'http://repo.spring.io/milestone'
        }
    }

    dependencyManagement {
        imports {
            mavenBom 'io.spring.platform:platform-bom:2.0.0.RELEASE'
        }
    }

    ext {
        generatedSourcesDir = new File("${projectDir}/src/generated")
        generatedSourcesJavaDir = new File(generatedSourcesDir, "/java")
    }

    sourceSets {
        main {
            java {
                srcDir generatedSourcesJavaDir
            }
        }
    }

    clean {
        delete generatedSourcesDir
    }

    configurations {
        all*.exclude group: "javax.servlet", module: "servlet-api"
    }

    dependencies {
        /*******************************
         * Compile Dependencies
         *******************************/

        compile("org.apache.commons:commons-lang3")
        compile("org.springframework.boot:spring-boot-starter-logging")

        /*******************************
         * Provided Dependencies
         *******************************/

        /*******************************
         * Runtime Dependencies
         *******************************/

        /*******************************
         * Test Dependencies
         *******************************/

        testCompile("org.springframework.boot:spring-boot-starter-test")

        testRuntime("javax.el:javax.el-api")
        testRuntime("org.glassfish:javax.el")
    }

    test {
        useJUnit {
            includeCategories 'com.netflix.genie.test.categories.UnitTest'
            excludeCategories 'com.netflix.genie.test.categories.IntegrationTest'
            excludeCategories 'com.netflix.genie.test.categories.DocumentationTest'
        }
    }

    task integrationTests(type: Test) {
        dependsOn test
        useJUnit {
            includeCategories 'com.netflix.genie.test.categories.IntegrationTest'
            excludeCategories 'com.netflix.genie.test.categories.UnitTest'
            excludeCategories 'com.netflix.genie.test.categories.DocumentationTest'
        }
    }

    task documentationTests(type: Test) {
        dependsOn integrationTests
        useJUnit {
            includeCategories 'com.netflix.genie.test.categories.DocumentationTest'
            excludeCategories 'com.netflix.genie.test.categories.UnitTest'
            excludeCategories 'com.netflix.genie.test.categories.IntegrationTest'
        }
    }

    check.dependsOn documentationTests

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/test/${name}")
    }

    license {
        excludes(["${projectDir}/src/generated/java"])
    }

    checkstyle {
        toolVersion = '6.11'
        configFile = new File(project.parent.projectDir, "codequality/checkstyle/checkstyle.xml")
    }

    findbugs {
        excludeFilter = new File(project.parent.projectDir, "codequality/findbugs/excludeFilter.xml")
    }

    tasks.withType(Pmd) {
        reports.html.enabled true
    }

    jacocoTestReport {
        reports.html.enabled true
    }
}
