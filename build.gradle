buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://repo.spring.io/milestone'
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.2.RELEASE")
    }
}

plugins {
    id 'nebula.netflixoss' version '2.2.10'
    id 'nebula.provided-base' version '2.2.2'
    id 'org.unbroken-dome.test-sets' version '1.2.0'
}

ext.githubProjectName = rootProject.name

apply plugin: 'java'

release {
    tagStrategy {
        prefixNameWithV = false
    }
}

nebulaRelease {
    addReleaseBranchPattern(/(release(-|\/))?\d+(\.\d+)?\.(x|\d+)/)
}

allprojects {
    clean {
        delete 'genie-db'
        delete 'derby.log'
        delete 'data'
    }
}

subprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'
    apply plugin: 'nebula.provided-base'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.unbroken-dome.test-sets'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = "com.netflix.${githubProjectName}"

    repositories {
        jcenter()
        mavenLocal()
        maven {
            url 'http://repo.spring.io/milestone'
        }
    }

    testSets {
        integrationTest {
            dirName = 'integration-test'
        }
    }

    project.integrationTest {
        outputs.upToDateWhen {
            false
        }
    }

    check.dependsOn integrationTest
    integrationTest.mustRunAfter test

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/${name}s")
    }

    configurations {
        all*.exclude group: "javax.servlet", module: "servlet-api"
    }

    dependencyManagement {
        imports {
            mavenBom 'io.spring.platform:platform-bom:1.1.3.RELEASE'
        }
    }

    dependencies {
        /*******************************
         * Compile Dependencies
         *******************************/

        compile("org.apache.commons:commons-lang3")
        compile("org.springframework.boot:spring-boot-starter-logging")

        /*******************************
         * Provided Dependencies
         *******************************/

        /*******************************
         * Runtime Dependencies
         *******************************/

        /*******************************
         * Test Dependencies
         *******************************/

        testCompile("org.springframework.boot:spring-boot-starter-test")

        testRuntime("javax.el:javax.el-api")
        testRuntime("org.glassfish:javax.el")
    }

    checkstyle {
        toolVersion = "6.0"
        configFile = new File(project.parent.projectDir, "codequality/checkstyle/checkstyle.xml")
    }

    findbugs {
        excludeFilter = new File(project.parent.projectDir, "codequality/findbugs/excludeFilter.xml")
    }

    tasks.withType(Pmd) {
        reports.html.enabled true
    }

    test {
        jacoco {
            excludes = ['com/netflix/genie/common/model/*_*']
        }
    }

    jacocoTestReport {
        doFirst {
            classDirectories = fileTree(dir: "${buildDir}/classes/main/").exclude(['com/netflix/genie/common/model/*_*'])
        }
        reports.html.enabled true
    }
}
