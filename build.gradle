buildscript {
    repositories {
        jcenter()
        maven {
            url 'http://repo.spring.io/milestone'
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
        classpath("io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE")
        classpath("org.asciidoctor:asciidoctor-gradle-plugin:1.5.3")
    }
}

plugins {
    id 'nebula.netflixoss' version '3.2.3'
    id 'nebula.optional-base' version '3.0.3'
    id 'nebula.provided-base' version '3.0.3'
}

ext.githubProjectName = rootProject.name

release {
    tagStrategy {
        prefixNameWithV = false
    }
}

nebulaRelease {
    addReleaseBranchPattern(/(release(-|\/))?\d+(\.\d+)?\.(x|\d+)/)
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'
}

idea {
    project {
        jdkName = '1.8'
        languageLevel = '1.8'
        vcs = 'Git'
    }
}

subprojects {
    apply plugin: 'nebula.netflixoss'
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'nebula.optional-base'
    apply plugin: 'nebula.provided-base'

    group = "com.netflix.${githubProjectName}"

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        maven {
            url 'http://repo.spring.io/milestone'
        }
    }

    dependencyManagement {
        imports {
            mavenBom 'io.spring.platform:platform-bom:2.0.2.RELEASE'
//            mavenBom 'org.springframework.cloud:spring-cloud-starter-parent:Brixton.M4'
        }
    }

    ext {
        generatedSourcesDir = new File("${projectDir}/src/generated")
        generatedSourcesJavaDir = new File(generatedSourcesDir, "/java")
    }

    sourceSets {
        main {
            java {
                srcDir generatedSourcesJavaDir
            }
        }
    }

    clean {
        delete "${projectDir}/genie-db"
        delete "${projectDir}/data"
        delete generatedSourcesDir.toString()
    }

    configurations {
        all*.exclude group: "javax.servlet", module: "servlet-api"
    }

    dependencies {
        /*******************************
         * Compile Dependencies
         *******************************/

        compile("org.apache.commons:commons-lang3")

        /*******************************
         * Provided Dependencies
         *******************************/

        provided("org.projectlombok:lombok")

        /*******************************
         * Runtime Dependencies
         *******************************/

        /*******************************
         * Test Dependencies
         *******************************/

        testCompile("org.springframework.boot:spring-boot-starter-test")

        testRuntime("javax.el:javax.el-api")
        testRuntime("org.glassfish:javax.el")
    }

    test {
        useJUnit {
            includeCategories 'com.netflix.genie.test.categories.UnitTest'
            excludeCategories 'com.netflix.genie.test.categories.IntegrationTest'
            excludeCategories 'com.netflix.genie.test.categories.DocumentationTest'
        }
    }

    task integrationTests(type: Test) {
        dependsOn test
        useJUnit {
            includeCategories 'com.netflix.genie.test.categories.IntegrationTest'
            excludeCategories 'com.netflix.genie.test.categories.UnitTest'
            excludeCategories 'com.netflix.genie.test.categories.DocumentationTest'
        }
    }

    task documentationTests(type: Test) {
        dependsOn integrationTests
        useJUnit {
            includeCategories 'com.netflix.genie.test.categories.DocumentationTest'
            excludeCategories 'com.netflix.genie.test.categories.UnitTest'
            excludeCategories 'com.netflix.genie.test.categories.IntegrationTest'
        }
    }

    // See: http://csiebler.github.io/blog/2014/02/09/multi-project-code-coverage-using-gradle-and-jacoco/
    task unitTestCoverage(type: JacocoReport) {
        // (change this if you e.g. want to calculate unit test/integration test coverage separately)
        executionData file("build/jacoco/test.exec")

        // Add all relevant sourcesets from the subprojects
        sourceSets sourceSets.main

        reports {
            xml.enabled true
            html.destination "${reporting.baseDir}/jacoco/unitTests"
            csv.enabled false
        }
    }

    task integrationTestCoverage(type: JacocoReport) {
        // (change this if you e.g. want to calculate unit test/integration test coverage separately)
        executionData file("build/jacoco/integrationTests.exec")

        // Add all relevant sourcesets from the subprojects
        sourceSets sourceSets.main

        reports {
            xml.enabled true
            html.destination "${reporting.baseDir}/jacoco/integrationTests"
            csv.enabled false
        }
    }

    // always run the tests before generating the report
    unitTestCoverage.dependsOn test
    integrationTestCoverage.dependsOn integrationTests

    check.dependsOn unitTestCoverage
    check.dependsOn integrationTestCoverage

    tasks.withType(Test) {
        reports.html.destination = file("${reporting.baseDir}/test/${name}")
    }

    license {
        excludes(["${projectDir}/src/generated/*"])
    }

    checkstyle {
        toolVersion = '6.11'
        configFile = new File(project.parent.projectDir, "codequality/checkstyle/checkstyle.xml")
    }

    findbugs {
        excludeFilter = new File(project.parent.projectDir, "codequality/findbugs/excludeFilter.xml")
    }

    tasks.withType(Pmd) {
        reports.html.enabled true
    }
}
